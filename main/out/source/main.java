/* autogenerated by Processing revision 1286 on 2024-02-01 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.security.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class main extends PApplet {

GameController gc_ref;

// variables
final float     targetMargin = 100;
final int       boundsLength = 20;
      int       TILE_SIZE;
      VectorInt PLAY_AREA_SIZE;

// directions
public final int GRASS = 0;
public final int ROAD  = 1;
public final int CITY  = 2;
public final int EMPTY = 3;
public final String[] TYPE_NAMES = {"Grass", "Road", "City", "Empty"};

public final int NORTH = 0;
public final int EAST  = 1;
public final int SOUTH = 2;
public final int WEST  = 3;
public final String[] DIRECTION_NAMES = {"North", "East", "South", "West"};

// use this maybe???
enum FaceType{
    GRASS   (0, "Grass"),
    ROAD    (1, "Road"),
    CITY    (2, "City"),
    EMPTY   (3, "Empty");

    private final int       index;
    private final String    label;
    FaceType(int index, String label){
        this.index = index;
        this.label = label;
    }

    @Override
    public String toString(){
        return this.label;
    }
}

public final int NULL  = 100;

public final boolean DEBUG_MODE = true;

 public void setup(){
    /* size commented out by preprocessor */;
    println("---Program start.");

    TILE_SIZE = PApplet.parseInt((width - targetMargin*2) / boundsLength);
    PLAY_AREA_SIZE = new VectorInt(
        boundsLength,
        PApplet.parseInt((height - targetMargin*2) / TILE_SIZE)
    );
    println("TILE_SIZE: \t\t" + TILE_SIZE);
    println("PLAY_AREA_SIZE: \t" + PLAY_AREA_SIZE);

    gc_ref = new GameController();
}

 public void draw(){
    background(0);

    gc_ref.Update();
    gc_ref.Render();
}


 public void mousePressed(){
    if(mouseButton == LEFT){
        gc_ref.LeftMousePressed();
    }
    if( mouseButton == RIGHT){
        gc_ref.RightMousePressed();
    }
}

// bound a direction between 0, 1, 2, 3
 public int BoundDirection(int direction){
    int x = direction;
    if( x < 0 ){
        x += 4;
        x = BoundDirection(x);
    }
    else if( x > 3){
        x -= 4;
        x = BoundDirection(x);
    }
    return x;
}


class GameController{
    // handlers
    GraphicsHandler graphicsHandler;
    UIHandler       uiHandler;

    // sprites
    PImage[]    sprites;
    int         spriteSize = 24;
    int         nextSpriteID;

    // tile properties and arrays
    Tile[][]    placedTiles_matrix;
    TileData[]  tileData_array;

    // possible placements
    ArrayList<VectorInt>    validMoves              = new ArrayList<VectorInt>();
    IntList                 validRotations_IntList  = new IntList();

    // tile deck properties
    IntDict tileDistribution_dict;
    int     discardCount = 0;

    // preview tile properties
    private VectorInt   moveGridPosition;
    private int         moveRotation;
    private IntList     moveValidRotations_IntList  = new IntList();
    private int         moveValidRotationsIndex;

    // game control
    private boolean isGameOver = false;

    // input control
    private boolean isPreviewingMove        = false;
    private boolean hasConfirmedMove   = false;


    // finals
    final int[][] theFourHorsemen = {{0,-1}, {1,0}, {0,1}, {-1,0}};





    // CONSTRUCTOR
    public GameController(){
        // load all sprites
        sprites = new PImage[spriteSize];
        for(int i = 0; i < spriteSize; i++){
            String s = str(i);
            while( s.length() < 2)
                s = "0" + s;
            sprites[i] = loadImage("resources/sprites/sprite_" + s + ".png");
        }

        tileData_array = new TileData[spriteSize];
        tileData_array = this.LoadTilesFromJSON();

        ResetGame();
    }






    // MAIN METHODS

    public void Update(){
        // check if game is over
        if(this.tileDistribution_dict.size() == 0){
            this.GameOver();
            return;
        }

        // place a tile if we have confirmed our placed
        if(this.isPreviewingMove && this.hasConfirmedMove){
            PlaceTile();
            ClearInputFlags();
            DrawNextTile();
        }
    }

    public void Render(){
        graphicsHandler.Render();
        uiHandler.Render();
    }




    // GAME FUNCTIONALITY

    private void GameOver(){
        this.isGameOver = true;
        delay(10000);
        ResetGame();
    }

    private void ResetGame(){
        // initialize handlers
        graphicsHandler = new GraphicsHandler(this);
        uiHandler = new UIHandler(this);

        // initialize arrays
        placedTiles_matrix      = new Tile[PLAY_AREA_SIZE.x][PLAY_AREA_SIZE.y];
        tileDistribution_dict   = new IntDict();
        discardCount = 0;

        ClearInputFlags();

        // add starter tile to middle position
        VectorInt middlePosition = new VectorInt(PApplet.parseInt(PLAY_AREA_SIZE.x/2), PApplet.parseInt(PLAY_AREA_SIZE.y/2));
        placedTiles_matrix[middlePosition.x][middlePosition.y] = new Tile(middlePosition, 14);

        // Fill deck with cards and remove one starter tile
        FillDeck();
        tileDistribution_dict.sub("14", 1);

        // draw the next tile
        DrawNextTile();
    }





    // DECK FUNCTIONALITY

    public void DrawNextTile(){
        if(this.tileDistribution_dict.size() == 0) return;

        int randomIndex = PApplet.parseInt( random(0, this.tileDistribution_dict.size() ) );

        String spriteID  = this.tileDistribution_dict.keyArray()[ randomIndex ];
        int tileCount = this.tileDistribution_dict.get( spriteID );
        
        // decrease the tileCount
        this.tileDistribution_dict.sub( spriteID, 1 );
        if(this.tileDistribution_dict.get( spriteID ) == 0)
            this.tileDistribution_dict.remove( spriteID );

        nextSpriteID = PApplet.parseInt( spriteID );
        
        if(!IsPlacementPossible()){
            discardCount++;
            DrawNextTile();
        }
    }

    public int GetDistributionCount(){
        int count = 0;
        for(int i : tileDistribution_dict.values())
            count += i;
        return count;
    }

    private void FillDeck(){
        tileDistribution_dict.clear();
        for(int i=0; i<tileData_array.length; i++){
            TileData td = tileData_array[i];
            if(td == null) continue;

            String id = str(td.getSpriteID());
            int count = td.getTileCount();

            tileDistribution_dict.set(id, count);
        }
    }




    // TILE FUNCTIONALITY

    public PImage FetchTileSprite(int spriteID){
        return this.sprites[spriteID];
    }

    public PImage getNextSprite(){
        return this.sprites[nextSpriteID];
    }

    private void PlaceTile(){
        Tile newTile = new Tile(moveGridPosition, nextSpriteID, moveRotation);
        
        // set neighbours
        Tile[] neighbours = FetchNeighbours(moveGridPosition);
        println();
        for(int i=0; i<4; i++){
            if(neighbours[i] == null) continue;
            newTile.AddNeighbour(i, neighbours[i]);
            neighbours[i].AddNeighbour(BoundDirection(i-2), newTile);
            println("Neighbour " + DIRECTION_NAMES[i] + ": " + neighbours[i].getSpriteID());
        } 

        this.placedTiles_matrix[moveGridPosition.x][moveGridPosition.y] = newTile;
    }

    private boolean PositionHasNeighbours(VectorInt _gridPosition){
        for(int i = 0; i < 4; i++){
            VectorInt checkLocation = new VectorInt(
                _gridPosition.x + theFourHorsemen[i][0],
                _gridPosition.y + theFourHorsemen[i][1]
            );
            if( checkLocation.x < 0 || checkLocation.x >= PLAY_AREA_SIZE.x ||
            checkLocation.y < 0 || checkLocation.y >= PLAY_AREA_SIZE.y )
                continue;
            if(this.placedTiles_matrix[checkLocation.x][checkLocation.y] != null)
                return true;
        }
        return false;
    }

    private Tile[] FetchNeighbours(VectorInt _gridPosition){
        Tile[] compassNeighbours = new Tile[4];
        for(int i=0; i<4; i++){
            VectorInt checkPosition = new VectorInt(
                _gridPosition.x + theFourHorsemen[i][0],
                _gridPosition.y + theFourHorsemen[i][1]
            );
            Tile checkTile = placedTiles_matrix[checkPosition.x][checkPosition.y];
            if(checkTile != null){
                compassNeighbours[i] = checkTile;
            }
        }

        return compassNeighbours;
    }


    // FEATURE FUNCTIONALITY




    // MOVE FUNCTIONALITY

    public boolean IsValidTilePlacement(VectorInt _gridPosition){
        if( this.placedTiles_matrix[_gridPosition.x][_gridPosition.y] != null )
            return false;
        if( !PositionHasNeighbours(_gridPosition) )
            return false;

        boolean[] _gridPositionCorrectRotations = FetchValidRotations(_gridPosition, nextSpriteID);
        boolean noRotations = false;
        for(int i=0; i<4; i++)
            noRotations = noRotations || _gridPositionCorrectRotations[i];
        if(!noRotations)
            return false;

        return true;
    }

    public boolean IsPlacementPossible(){
        this.validMoves.clear();
        this.validRotations_IntList.clear();

        for(int x=0; x<PLAY_AREA_SIZE.x; x++){
            for(int y=0; y<PLAY_AREA_SIZE.y; y++){
                VectorInt pos = new VectorInt(x, y);

                if(IsValidTilePlacement(pos))
                    this.validMoves.add(pos);
                else
                    continue;
                
                boolean[] rotations = FetchValidRotations(pos, nextSpriteID);
                int count = 0;
                for(int i=0; i<4; i++){
                    if(rotations[i]) count++;
                }
                
                this.validRotations_IntList.append(count);
            }
        }

        if(this.validMoves.size() != 0)
            return true;
        return false;
    }

    public TileData FetchTileData(int _tileID){
        for(TileData td : tileData_array){
            if( td.getSpriteID() == _tileID )
                return td;
        }
        return null;
    }

    private boolean[] FetchValidRotations(VectorInt _gridPosition, int _spriteID){
        // get a list of connections at point
        int[] connectionsList = CalculateNeighbouringFaces(_gridPosition);

        // retrieve _spriteID connection list
        int[] tileConnections = tileData_array[_spriteID].getPortTypes();

        // Rotates the tile and adds a boolean item determining if the lists match at that certain rotation
        boolean[] answer = new boolean[4];
        for(int i=0; i<4; i++){
            int[] rotatedList = RotateListNTimes(tileConnections, i);
            answer[i] = IsTypeListsMatchable(rotatedList, connectionsList);
        }
        return answer;
    }



    // INPUT

    public void LeftMousePressed(){
        // check for UI click
        if( uiHandler.IsInsideUI() ){
            int buttonPressed = uiHandler.LeftMousePressed();
            if( buttonPressed == uiHandler.CANCEL){
                ClearInputFlags();
            }
            else if( buttonPressed == uiHandler.CONFIRM){
                this.hasConfirmedMove = true;
            }
            return;
        }

        if( !MouseWithinPlayarea() )
            return;

        VectorInt mouseGridPos = MouseToGridPosition();
        if( mouseGridPos == null ) return;

        if( !IsValidTilePlacement(mouseGridPos) )
            return;
        
        // generate correct rotations
        GenerateCorrectRotations(mouseGridPos);

        moveGridPosition = mouseGridPos;
        this.isPreviewingMove = true;
    }

    public void RightMousePressed(){
        if( isPreviewingMove ){
            moveValidRotationsIndex++;
            if(moveValidRotationsIndex > (moveValidRotations_IntList.size()-1))
                moveValidRotationsIndex = 0;
            moveRotation = moveValidRotations_IntList.get(moveValidRotationsIndex);
        }
    }

    public VectorInt MouseToGridPosition(){
        PVector offsetMousePos = new PVector(mouseX-targetMargin, mouseY-targetMargin);
        if( offsetMousePos.x < 0 || offsetMousePos.y < 0 || offsetMousePos.x >= (PLAY_AREA_SIZE.x*TILE_SIZE) || offsetMousePos.y >= (PLAY_AREA_SIZE.y*TILE_SIZE) )
            return null;
        
        return new VectorInt( PApplet.parseInt(offsetMousePos.x / TILE_SIZE), PApplet.parseInt(offsetMousePos.y / TILE_SIZE) );
    }

    private boolean MouseWithinPlayarea(){
        if( mouseX <= targetMargin || mouseY <= targetMargin ||
        mouseX >= (targetMargin + PLAY_AREA_SIZE.x*TILE_SIZE) ||
        mouseY >= (targetMargin + PLAY_AREA_SIZE.y*TILE_SIZE))
            return false;
        return true;
    }

    private void ClearInputFlags(){
        this.hasConfirmedMove = false;
        this.isPreviewingMove = false;
        moveValidRotations_IntList.clear();
        moveValidRotationsIndex = 0;
    }

    // HELLO ROZA   ! ! ! ! ! ! <3
    //
    //     |\__/,|   (`\
    //   _.|o o  |_   ) )
    // -(((---(((--------
    //
    

    


    // TILE PROPERTY MAGIC MATH

    public int[] CalculateNeighbouringFaces(VectorInt _gridPosition){
        if(_gridPosition == null) return null;
        int[] facesList = new int[4];
        for(int i=0; i<4; i++){
            VectorInt checkPosition = new VectorInt(
                _gridPosition.x + theFourHorsemen[i][0],
                _gridPosition.y + theFourHorsemen[i][1]
            );
            // get the tile or null at that location
            if( checkPosition.x < 0 || checkPosition.x >= PLAY_AREA_SIZE.x ||
            checkPosition.y < 0 || checkPosition.y >= PLAY_AREA_SIZE.y )
                continue;
            Tile checkTile = this.placedTiles_matrix[checkPosition.x][checkPosition.y];
            
            // set facetype depending on if there is a tile or not
            int faceType;
            if(checkTile == null)
                faceType = EMPTY;
            else{
                int checkSpriteID =  checkTile.getSpriteID();
                int[] dataTilePortList = tileData_array[checkSpriteID].getPortTypes();
                int[] rotatedDataList = RotateListNTimes(dataTilePortList, checkTile.getRotation());
                faceType = rotatedDataList[BoundDirection(i+2)];
            }

            // add that type to the facesList
            facesList[i] = faceType;
        }
        return facesList;
    }

    private void GenerateCorrectRotations(VectorInt _gridPosition){
        moveValidRotationsIndex = 0;
        moveValidRotations_IntList.clear();


        boolean[] correctRotations = new boolean[4];

        int[] connectionsList = CalculateNeighbouringFaces(_gridPosition);
        int[] tileConnections = tileData_array[get_nextSpriteID()].getPortTypes();

        for(int i=0; i<4; i++){
            int[] rotatedList = RotateListNTimes(tileConnections, i);
            correctRotations[i] = IsTypeListsMatchable(rotatedList, connectionsList);
        }


        for(int i=0; i<4; i++){
            if(correctRotations[i])
                moveValidRotations_IntList.append(i);
        }
        moveRotation = moveValidRotations_IntList.get(0);
    }

    private int[] RotateListNTimes(int[] _list, int _n){
        int[] rotatedList = _list;
        for(int i=0; i<_n; i++){
            int[] newList = {
                rotatedList[3],
                rotatedList[0],
                rotatedList[1],
                rotatedList[2]
            };
            rotatedList = newList;
        }

        return rotatedList;
    }

    private boolean IsTypeListsMatchable(int[] _tileTypeList, int[] _surrTypeList){
        for(int i=0; i<4; i++){
            if(_surrTypeList[i] == EMPTY)
                continue;
            if(_surrTypeList[i] != _tileTypeList[i])
                return false;
        }
        return true;
    }





    // JSON 

    private TileData[] LoadTilesFromJSON(){
        String filename = "tileData";
        JSONArray tilePieces = loadJSONArray(filename + ".json");
        TileData[] loadedTiles = new TileData[tilePieces.size()];

        // loop through available loaded Tile objects
        for (int i=0; i < tilePieces.size(); i++){
            // variables for each tile object
            int tileID, tileCount;
            int[] portTypes = new int[4];
            boolean[][] portConnections = new boolean[4][4];
            
            // load tile object at index
            JSONObject tile = tilePieces.getJSONObject(i);

            // retrieve tile id
            tileID = tile.getInt("id");

            // retrieve tile count
            tileCount = tile.getInt("count");

            // retrieve tile portTypes
            JSONArray portTypesArray   = tile.getJSONArray("portTypes");
            portTypes = portTypesArray.toIntArray();

            // retrieve boolean portsConnections
            JSONArray portsConnectionsX = tile.getJSONArray("portConnections");
            for(int x=0; x<4; x++){
                JSONArray portsConnectionsY = portsConnectionsX.getJSONArray(x);
                for(int y=0; y<4; y++){
                    portConnections[x][y] = portsConnectionsY.getBoolean(y);
                }
            }

            // add a tile with this information
            TileData newTileData = new TileData(tileID, tileCount, portTypes, portConnections);
            loadedTiles[i] = newTileData;
        }

        println("\nLoaded " + loadedTiles.length + " tiles from JSON file!");
        return loadedTiles;
    }





    // GETTERS

    // sprite
    public int get_nextSpriteID(){
        return this.nextSpriteID;
    }

    // tiles
    public Tile[][] get_placedTiles(){
        return this.placedTiles_matrix;
    }
    public IntDict get_tileDistribution(){
        return this.tileDistribution_dict;
    }
    public int get_discardCount(){
        return this.discardCount;
    }

    // possible moves properties
    public IntList get_validRotations(){
        return this.validRotations_IntList;
    }
    public ArrayList<VectorInt> get_validMoves(){
        return this.validMoves;
    }

    // move properties
    public VectorInt get_moveGridPosition(){
        return this.moveGridPosition;
    }
    public int get_moveRotation(){
        return this.moveRotation;
    }
    public IntList get_moveValidRotations(){
        return this.moveValidRotations_IntList;
    }
    public int get_moveValidRotationsIndex(){
        return this.moveValidRotationsIndex;
    }

    public boolean isPreviewingMove(){
        return this.isPreviewingMove;
    }
}
class GraphicsHandler{
    // Game Controller reference
    private GameController gc_ref;




    // CONSTRUCTOR
    public GraphicsHandler(GameController gc_ref){
        this.gc_ref = gc_ref;
    }




    // MAIN METHOD
    public void Render(){
        if(DEBUG_MODE){
            RenderGridBounds();
            RenderPossiblePlacements();
        } 
        RenderTiles();
        if(gc_ref.isPreviewingMove())
            RenderPreviewTile();
        
        if(DEBUG_MODE) RenderMouseGridLocation();
    }






    // RENDER METHODS

    private void RenderTiles(){
        Tile[][] pt = gc_ref.get_placedTiles();
        for(int x = 0; x < PLAY_AREA_SIZE.x; x++){
            for(int y = 0; y < PLAY_AREA_SIZE.y; y++){
                Tile tileToRender = pt[x][y];
                if( tileToRender == null ) continue;
                this.RenderTile(tileToRender.getSpriteID(), tileToRender.getRotation(), new VectorInt(x, y), false);
            }
        }
    }

    private void RenderPreviewTile(){
        this.RenderTile(gc_ref.get_nextSpriteID(), gc_ref.get_moveRotation(),  gc_ref.get_moveGridPosition(), true);
    }

    private void RenderTile(int spriteID, int rotation, VectorInt gridLocation, boolean highlight){
        PImage      sprite          = gc_ref.FetchTileSprite(spriteID);

        PVector drawLocation = new PVector(
            gridLocation.x * TILE_SIZE, 
            gridLocation.y * TILE_SIZE
        );
    
        pushMatrix();
        translate(
            targetMargin + TILE_SIZE/2, 
            targetMargin + TILE_SIZE/2);
        translate(
            drawLocation.x,
            drawLocation.y);
        pushStyle();
        imageMode(CENTER);

        // change direction if needed
        rotate(rotation * HALF_PI);

        if( highlight )
            tint(170, 170, 170, 150);
        image(
            sprite, 
            0, 0, 
            TILE_SIZE, TILE_SIZE );
        if(DEBUG_MODE){
            stroke(255,0,0);
            strokeWeight(2);
            line(0,0,0,-TILE_SIZE/2);
        }
        popStyle();
        popMatrix();
    }



    // DEBUG RENDER METHODS

    private void RenderPossiblePlacements(){
        pushMatrix();
        translate(targetMargin + TILE_SIZE/2, targetMargin + TILE_SIZE/2);

        pushStyle();
        noStroke();


        rectMode(CENTER);
        textAlign(CENTER, CENTER);
        textSize(20);
        for(int i=0; i<gc_ref.get_validMoves().size(); i++){
            VectorInt v = gc_ref.get_validMoves().get(i);
            PVector drawPosition = new PVector(v.x * TILE_SIZE, v.y * TILE_SIZE);
            fill(200,100,100);
            rect(drawPosition.x, drawPosition.y, TILE_SIZE/2, TILE_SIZE/2);
            fill(0);
            text(gc_ref.get_validRotations().get(i), drawPosition.x, drawPosition.y);
        }

        

        popStyle();
        popMatrix();
    }

    private void RenderGridBounds(){
        pushMatrix();
        translate(targetMargin, targetMargin);

        // draw a light gridmap with numbers
        for(int x = 0; x < PLAY_AREA_SIZE.x; x++){
            for(int y = 0; y < PLAY_AREA_SIZE.y; y++){
                noFill();
                strokeWeight(1);
                rect(
                    x*TILE_SIZE,
                    y*TILE_SIZE,
                    TILE_SIZE,
                    TILE_SIZE
                );
            }
        }
        
        // draw the boundaries
        noFill();
        stroke(255,0,0);
        strokeWeight(2);
        rect(0, 0, PLAY_AREA_SIZE.x*TILE_SIZE, PLAY_AREA_SIZE.y*TILE_SIZE);
        popMatrix();
    }

    private void RenderMouseGridLocation(){
        VectorInt mouseGridPosition = gc_ref.MouseToGridPosition();
        pushStyle();
        fill(255,0,0);

        textAlign(TOP, BOTTOM);
        textSize(25);
        text(mouseGridPosition == null ? "null" : mouseGridPosition.toString(), mouseX + 20, mouseY + 40);

        popStyle();
    }
}
class Tile{
    int         rotation = 0;

    VectorInt   gridPosition;
    int         tileID;

    Tile[] neighbours;

    // main constructor
    public Tile(VectorInt gridPosition, int tileID){
        this.gridPosition = gridPosition;
        this.tileID = tileID;
        this.rotation = NORTH;

        neighbours = new Tile[4];
    }

    // place tile constructor
    public Tile(VectorInt gridPosition, int tileID, int rotation){
        this.gridPosition = gridPosition;
        this.tileID = tileID;
        this.rotation = rotation;
        
        neighbours = new Tile[4];
    }

    public void AddNeighbour(int _index, Tile _tileRef){
        this.neighbours[_index] = _tileRef;
    }

    // getters
    public int getSpriteID(){
        return this.tileID;
    }
    public VectorInt getGridPosition(){
        return this.gridPosition;
    }
    public int getRotation(){
        return this.rotation;
    }
}
class TileData{
    int tileID, tileCount;
    int[] portTypes;
    boolean[][] portConnections;

    TileData(int tileID, int tileCount, int[] portTypes, boolean[][] portConnections){
        this.tileID = tileID;
        this.portTypes = portTypes;
        this.portConnections = portConnections;
        this.tileCount = tileCount;
    }

    public int getSpriteID(){
        return this.tileID;
    }

    public int getTileCount(){
        return this.tileCount;
    }

    // return entire port types list
    public int[] getPortTypes(){
        return this.portTypes;
    }

    // return port type at compass direction
    public int getPortType(int i){
        return this.portTypes[i];
    }
}
class UIHandler{
    // GameController reference
    GameController gc_ref;

    // color scheme
    int grayColor = color(90, 90, 110);
    int grayColorOpaque = color(90,90,110,200);

    // conditinoal button positions
    PVector buttonCancelPosition;
    PVector buttonConfirmPosition;

    // conditional button parameters
    PVector buttonBoxSize   = new PVector(width*0.05f, height*0.16f);
    float   padding           = buttonBoxSize.x*0.25f;
    float   boxRadius         = buttonBoxSize.x*0.5f;
    float   buttonRadius      = boxRadius*0.75f;
    PVector drawLoc         = new PVector(width - (padding + buttonBoxSize.x), height - (padding + buttonBoxSize.y));

    // input
    boolean leftMousePressed = false;

    // finals
    final int CANCEL    = 0;
    final int CONFIRM   = 1;
    final int NONE      = 3;
    
    



    // CONSTRUCTOR
    public UIHandler(GameController gc_ref){
        this.gc_ref = gc_ref;

        
        buttonCancelPosition = new PVector(drawLoc.x + boxRadius, drawLoc.y + boxRadius);
        buttonConfirmPosition = new PVector(drawLoc.x + boxRadius, drawLoc.y + buttonBoxSize.y - boxRadius);
    }

    // MAIN METHOD
    public void Render(){
        VectorInt gridMousePosition = gc_ref.MouseToGridPosition();

        if( gridMousePosition != null && gc_ref.IsValidTilePlacement(gridMousePosition) )
            drawHighlightedPlacement(gridMousePosition);
        
        drawNextTile();

        if( gc_ref.isPreviewingMove() ){
            drawConditionalButton();
        }

        if(DEBUG_MODE) {
            drawTileDistribution();
            drawMoveVariables();
        }
    }



    // DRAW METHODS

    private void drawHighlightedPlacement(VectorInt gridMousePosition){
        pushMatrix();
        pushStyle();
        
        translate(targetMargin, targetMargin);
        rectMode(CORNER);
        noStroke();
        fill(255, 120);
        rect(gridMousePosition.x*TILE_SIZE, gridMousePosition.y*TILE_SIZE, TILE_SIZE, TILE_SIZE);
        
        popStyle();
        popMatrix();
    }

    private void drawNextTile(){
        // get bottom right corner location
        float boxDelta = 0.2f;
        float boxSize = height * boxDelta;
        PVector drawLoc = new PVector(width - boxSize, 0);
        float padding = height * boxDelta * 0.1f;
        PVector frameSize = new PVector(boxSize-padding*2, boxSize-padding*2);

        pushMatrix();

        translate(drawLoc.x, drawLoc.y);

        fill(grayColor);
        stroke(30);
        strokeWeight(2);
        rectMode(CORNER);
        rect(0, 0, boxSize, boxSize, 0, 0, 0, 15);

        translate(padding, padding);
        imageMode(CORNER);
        image(gc_ref.getNextSprite(), 0, 0, frameSize.x, frameSize.y);
        
        popMatrix();
    }

    private void drawConditionalButton(){

        fill(grayColor);
        stroke(30);
        strokeWeight(2);
        rectMode(CORNER);
        rect(drawLoc.x, drawLoc.y, buttonBoxSize.x, buttonBoxSize.y);

        ellipseMode(RADIUS);
        
        if( IsInsideButton(this.CANCEL) )
            fill(220, 100, 100);
        else
            fill(255, 100, 100);
        ellipse(buttonCancelPosition.x, buttonCancelPosition.y, buttonRadius, buttonRadius);

        if( IsInsideButton(this.CONFIRM) )
            fill(100, 220, 100);
        else   
            fill(100, 255, 100);
        ellipse(buttonConfirmPosition.x, buttonConfirmPosition.y, buttonRadius, buttonRadius);
    }



    // DEBUG

    private void drawTileDistribution(){
        IntDict     tileDistr           = gc_ref.get_tileDistribution();
        String[]    tileDistr_keys      = tileDistr.keyArray();
        int[]       tileDistr_values    = tileDistr.valueArray();

        IntList tileDistr_keys_list = new IntList();
        IntList tileDistr_values_list = new IntList();
        for(int i=0; i<tileDistr.size(); i++){
            tileDistr_keys_list.append(PApplet.parseInt(tileDistr_keys[i]));
            tileDistr_values_list.append(PApplet.parseInt(tileDistr_values[i]));
        }


        float   margin = 50;
        PVector boxSize = new PVector(200, 640);
        PVector controlPosition = new PVector(20, 260);

        pushMatrix();
        pushStyle();

        translate(controlPosition.x, controlPosition.y);

        fill(grayColorOpaque);
        stroke(255,0,0);
        rect(0, 0, boxSize.x, boxSize.y);

        translate(20,30);

        textSize(20);
        textAlign(BOTTOM, TOP);
        textLeading(25);

        fill(0,255,200);
        
        text("Count: " + gc_ref.GetDistributionCount() + "   D: " + gc_ref.get_discardCount(), 0, -20);
        
        int prevKey = -1;
        for(int i=0; i<tileDistr_keys_list.size(); i++){
            int key = tileDistr_keys_list.get(i);
            int value = tileDistr_values_list.get(i);

            if(key == gc_ref.get_nextSpriteID())
                fill(255,0,0);
            else
                fill(0,255,0);

            if(key != (prevKey+1)){
                if((prevKey+1) == gc_ref.get_nextSpriteID()){
                    fill(255,0,0);
                    text("ID: " + (prevKey+1),  0,      i*25);
                    text("0",                   120,    i*25);
                    fill(0,255,0);
                }
                translate(0,25);
            }
            
            text("ID: " + key,  0,      i*25);
            text(value,         120,    i*25);
            
            prevKey = key;
        }

        popStyle();
        popMatrix();
    }

    private void drawMoveVariables(){
        int spriteID = gc_ref.get_nextSpriteID();
        VectorInt gridPosition = gc_ref.get_moveGridPosition();
        int tileRotation = gc_ref.get_moveRotation();
        int[] mainFaces = gc_ref.FetchTileData(spriteID).getPortTypes();
        int[] surroundingFaces = gc_ref.CalculateNeighbouringFaces(gridPosition);
        IntList correctTileRotations = gc_ref.get_moveValidRotations();
        int correctTileRotationsIndex = gc_ref.get_moveValidRotationsIndex();
        
        
        pushMatrix();
        pushStyle();
        textAlign(TOP, CENTER);

        translate(20, 20);

        fill(120,120,120,120);
        stroke(255,0,0);
        strokeWeight(2);
        rect(0,0,440,230);

        translate(20,20);

        fill(120,255,120);
        textSize(20);

        // sprite id
        text("Sprite ID: " + spriteID, 0, 0);
        translate(0,25);

        // grid position
        text("Grid position: " + gridPosition, 0, 0);
        translate(0,25);
        
        // tile rotation
        text("Tile Rotation: " + DIRECTION_NAMES[tileRotation], 0, 0);
        translate(0,40);
        
        // main faces
        String s = "null";
        s = "[ " + TYPE_NAMES[mainFaces[0]];
        for(int i=1; i<mainFaces.length; i++){
            s += ", " + TYPE_NAMES[mainFaces[i]];
        }
        s += " ]";
        text("Main faces: " + s, 0, 0);
        translate(0,25);
        
        // surrounding faces
        s = "null";
        if(surroundingFaces != null){
            s = "[ " + TYPE_NAMES[surroundingFaces[0]];
            for(int i=1; i<surroundingFaces.length; i++){
                s += ", " + TYPE_NAMES[surroundingFaces[i]];
            }
            s += " ]";
        }
        text("Surrounding faces: " + s, 0, 0);
        translate(0,40);
        
        // correct rotations
        s = "null";
        if( correctTileRotations.size() != 0 ){
            s = "[ " + DIRECTION_NAMES[correctTileRotations.get(0)];
            for(int i=1; i<correctTileRotations.size(); i++){
                s += ", " + DIRECTION_NAMES[correctTileRotations.get(i)];
            }
            s += " ]";
        }
        text("Correct rotations: " + s, 0, 0);
        translate(0,25);
        
        // correct rotation index
        text("Correct rotations index: " + correctTileRotationsIndex, 0, 0);
        translate(0,25);
        




        popStyle();
        popMatrix();
    }

    





    // BUTTON CONTROL

    private boolean IsInsideButton(int button){
        PVector mousePosition = new PVector(mouseX, mouseY);
        PVector differensVector;
        if( gc_ref.isPreviewingMove() ){
            if( button == this.CANCEL )
                differensVector = PVector.sub(buttonCancelPosition, mousePosition);
            else if( button == this.CONFIRM ){
                differensVector = PVector.sub(buttonConfirmPosition, mousePosition);
            }
            else return false;
        }
        else return false;


        float magnitude = differensVector.mag();

        if( magnitude > buttonRadius)
            return false;

        return true;
    }

    public boolean IsInsideUI(){
        // check button
        PVector mousePos = new PVector(mouseX, mouseY);
        PVector buttonPanelMax = new PVector(drawLoc.x + buttonBoxSize.x, drawLoc.y + buttonBoxSize.y);

        if( mousePos.x >= drawLoc.x && mousePos.y >= drawLoc.y &&
        mousePos.x <= buttonPanelMax.x && mousePos.y <= buttonPanelMax.y)
            return true;
        
        return false;
    }

    public int LeftMousePressed(){
        this.leftMousePressed = true;
        if( IsInsideButton(this.CANCEL) )
            return this.CANCEL;
        else if( IsInsideButton(this.CONFIRM) )
            return this.CONFIRM;
        else
            return this.NONE;
    }
}
class Vector extends PVector{
    Vector(float x, float y){
        super(x, y);
    }

    public VectorInt snapToGrid(){
        int x = PApplet.parseInt(this.x / TILE_SIZE) * TILE_SIZE;
        int y = PApplet.parseInt(this.y / TILE_SIZE) * TILE_SIZE;
        return new VectorInt(x, y);
    }

    public VectorInt returnGridPosition(){
        int x = PApplet.parseInt(this.x / TILE_SIZE);
        int y = PApplet.parseInt(this.y / TILE_SIZE);
        return new VectorInt(x, y);
    }
}
class VectorInt{
    public int x, y;

    VectorInt(int x, int y){
        this.x = x;
        this.y = y;
    }

    public VectorInt returnGridPosition(){
        int x = PApplet.parseInt(this.x / TILE_SIZE);
        int y = PApplet.parseInt(this.y / TILE_SIZE);
        return new VectorInt(x, y);
    }
    
    public VectorInt scaleToGrid(){
        int x = PApplet.parseInt(this.x * TILE_SIZE);
        int y = PApplet.parseInt(this.y * TILE_SIZE);
        return new VectorInt(x, y);
    }
    
    public VectorInt asNew(){
        return new VectorInt(this.x, this.y);
    }

    // OPERATIONS

    public VectorInt mult(int d){
        this.x = this.x * d;
        this.y = this.y * d;
        return this;
    }

    public VectorInt mult(float d){
        this.x = PApplet.parseInt(this.x * d);
        this.y = PApplet.parseInt(this.y * d);
        return this;
    }

    public VectorInt div(int d){
        this.x = this.x / d;
        this.y = this.y / d;
        return this;
    }

    public VectorInt div(float d){
        this.x = PApplet.parseInt(this.x / d);
        this.y = PApplet.parseInt(this.y / d);
        return this;
    }
    
    @Override
    public String toString(){
        return "(" + this.x + ", " + this.y + ")";
    }
}


  public void settings() { size(1500, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "main" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
